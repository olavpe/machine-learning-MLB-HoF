#+TITLE: Extracting from Lahman's Raw Data
#+STARTUP: headlines
#+STARTUP: nohideblocks
#+STARTUP: noindent
#+OPTIONS: toc:4 h:4 ^:nil _:nil
#+PROPERTY: header-args:emacs-lisp :comments link
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+EXPORT_FILE_NAME: extract_data.html
#+HTML_HEAD: <style> #content{max-width:1800px;}</style>

* Activating Python Environment

  This code block must be run to activate python virtual environment for
  org session "SESSION_1". The following Python code blocks are run in
  "SESSION_1" in which the virtual environment should have been activated.

#+BEGIN_SRC emacs-lisp :session SESSION_1 :exports both
  (pyvenv-activate "~/gitRepos/TTK28-project/venv/")
#+END_SRC

#+RESULTS:

* Importing dependencies
  This project only uses ~pandas~ and built in python functions for data manipulation.

#+begin_src python :session SESSION_1 :results output :exports both
  import pandas as pd
  from icecream import ic
#+end_src

#+RESULTS:

* Importing Raw Data
  Importing the datasets from the raw Sean Lahman's Baseball Database, from
  those files that contain relevant data for determining MLB Hall of Fame Players.

#+begin_src python :session SESSION_1 :results output :exports both
master_df = pd.read_csv('../data/core/People.csv',
                        usecols=['playerID','nameFirst','nameLast','bats','throws','debut','finalGame'])
batting_df = pd.read_csv('../data/core/Batting.csv')
pitching_df = pd.read_csv('../data/core/Pitching.csv')
fielding_df = pd.read_csv('../data/core/Fielding.csv')
awards_df = pd.read_csv('../data/core/AwardsPlayers.csv',
                        usecols=['playerID','awardID','yearID'])
allstar_df = pd.read_csv('../data/core/AllstarFull.csv',
                         usecols=['playerID','yearID'])
hof_df = pd.read_csv('../data/core/HallOfFame.csv',
                     usecols=['playerID','yearID','votedBy','needed_note','inducted','category'])
appearances_df = pd.read_csv('../data/core/Appearances.csv')
#+end_src

#+RESULTS:

* Cleaning and Joining the Different Datasets

  Since data is spread over several files and is stored differently in the
  different files, the following sub sections attempt at extracting the relevant
  information and aggreating it for each player.

** Batting Data

   This adds the batting stats for the different players. The ~player_stats~
   dictionary is where the player information is aggregated until setting it to
   the ~master_df~.

#+begin_src python :session SESSION_1 :results output :exports both
player_stats = {} #key: playerID  value: player stats
years_played = {} #key: playerID  value: yearID

for i, row in batting_df.iterrows():
    playerID = row['playerID']
    if playerID in player_stats:
        player_stats[playerID]['G'] = player_stats[playerID]['G'] + row['G']
        player_stats[playerID]['AB'] = player_stats[playerID]['AB'] + row['AB']
        player_stats[playerID]['R'] = player_stats[playerID]['R'] + row['R']
        player_stats[playerID]['H'] = player_stats[playerID]['H'] + row['H']
        player_stats[playerID]['2B'] = player_stats[playerID]['2B'] + row['2B']
        player_stats[playerID]['3B'] = player_stats[playerID]['3B'] + row['3B']
        player_stats[playerID]['HR'] = player_stats[playerID]['HR'] + row['HR']
        player_stats[playerID]['RBI'] = player_stats[playerID]['RBI'] + row['RBI']
        player_stats[playerID]['SB'] = player_stats[playerID]['SB'] + row['SB']
        player_stats[playerID]['BB'] = player_stats[playerID]['BB'] + row['BB']
        player_stats[playerID]['SO'] = player_stats[playerID]['SO'] + row['SO']
        player_stats[playerID]['IBB'] = player_stats[playerID]['IBB'] + row['IBB']
        player_stats[playerID]['HBP'] = player_stats[playerID]['HBP'] + row['HBP']
        player_stats[playerID]['SH'] = player_stats[playerID]['SH'] + row['SH']
        player_stats[playerID]['SF'] = player_stats[playerID]['SF'] + row['SF']
        years_played[playerID].append(row['yearID'])
    else:
        player_stats[playerID] = {}
        player_stats[playerID]['G'] = row['G']
        player_stats[playerID]['AB'] = row['AB']
        player_stats[playerID]['R'] = row['R']
        player_stats[playerID]['H'] = row['H']
        player_stats[playerID]['2B'] = row['2B']
        player_stats[playerID]['3B'] = row['3B']
        player_stats[playerID]['HR'] = row['HR']
        player_stats[playerID]['RBI'] = row['RBI']
        player_stats[playerID]['SB'] = row['SB']
        player_stats[playerID]['BB'] = row['BB']
        player_stats[playerID]['SO'] = row['SO']
        player_stats[playerID]['IBB'] = row['IBB']
        player_stats[playerID]['HBP'] = row['HBP']
        player_stats[playerID]['SH'] = row['SH']
        player_stats[playerID]['SF'] = row['SF']
        years_played[playerID] = []
        years_played[playerID].append(row['yearID'])


# add number of years_played data into the player_stats dictionary
for k,v in years_played.items():
    player_stats[k]['Years_Played'] = len(list(set(v)))

#+end_src

#+RESULTS:

** Pitching Data

   This adds the pitching stats for the different players. The ~player_stats~
   dictionary is where the player information is aggregated until setting it to
   the ~master_df~.

#+begin_src python :session SESSION_1 :results output :exports both
  pitching_keys_list = ['IPouts', 'H-A', 'ER-A', 'HR-A', 'BB-A', 'SO-A',
                        'BAOpp', 'ERA', 'IBB-A', 'WP', 'HBP-A', 'BK',
                        'BFP', 'GF', 'R-A', 'SH-A', 'SF-A', 'GIDP']
  pitching_col_list = ['IPouts', 'H', 'ER', 'HR', 'BB', 'SO', 'BAOpp', 'ERA',
                       'IBB', 'WP', 'HBP', 'BK', 'BFP', 'GF', 'R',
                       'SH', 'SF', 'GIDP']
  pitching_col_to_avg = ['BAOpp', 'ERA']

  for i, pitch_row in pitching_df.iterrows():
      playerID = pitch_row['playerID']
      if playerID not in player_stats:
          player_stats[playerID] = {}
      for stat_key, stat_col in zip(pitching_keys_list, pitching_col_list):
          if stat_key in player_stats[playerID]:
              if stat_col in pitching_col_to_avg:
                  player_stats[playerID][stat_key] = (player_stats[playerID][stat_key] + pitch_row[stat_col])/2
              else:
                  player_stats[playerID][stat_key] += pitch_row[stat_col]
          else:
              player_stats[playerID][stat_key] = pitch_row[stat_col]

              # player_stats[playerID]['IPouts'] = player_stats[playerID]['IPouts'] + pitch_row['IPouts']
              # player_stats[playerID]['H-A'] = player_stats[playerID]['H-A']     + pitch_row['H']
              # player_stats[playerID]['ER-A'] = player_stats[playerID]['ER-A']   + pitch_row['ER']
              # player_stats[playerID]['HR-A'] = player_stats[playerID]['HR-A']   + pitch_row['HR']
              # player_stats[playerID]['BB-A'] = player_stats[playerID]['BB-A']   + pitch_row['BB']
              # player_stats[playerID]['SO-A'] = player_stats[playerID]['SO-A']   + pitch_row['SO']
              # player_stats[playerID]['BAOpp'] = (player_stats[playerID]['BAOpp']+ pitch_row['BAOpp'])/2
              # player_stats[playerID]['ERA'] = (player_stats[playerID]['ERA']    + pitch_row['ERA'])/2
              # player_stats[playerID]['IBB-A'] = player_stats[playerID]['IBB-A'] + pitch_row['IBB']
              # player_stats[playerID]['WP'] = player_stats[playerID]['WP']       + pitch_row['WP']
              # player_stats[playerID]['HBP-A'] = player_stats[playerID]['HBP-A'] + pitch_row['HBP']
              # player_stats[playerID]['BK'] = player_stats[playerID]['BK']       + pitch_row['BK']
              # player_stats[playerID]['BFP'] = player_stats[playerID]['BFP']     + pitch_row['BFP']
              # player_stats[playerID]['GF'] = player_stats[playerID]['GF']       + pitch_row['GF']
              # player_stats[playerID]['R-A'] = player_stats[playerID]['R-A']     + pitch_row['R']
              # player_stats[playerID]['SH-A'] = player_stats[playerID]['SH-A']   + pitch_row['SH']
              # player_stats[playerID]['SF-A'] = player_stats[playerID]['SF-A']   + pitch_row['SF']
              # player_stats[playerID]['GIDP'] = player_stats[playerID]['GIDP']   + pitch_row['GIDP']
          # else:
          #   player_stats[playerID]['IPouts'] = pitch_row['IPouts']
          #   player_stats[playerID]['H-A'] = pitch_row['H']
          #   player_stats[playerID]['ER-A'] = pitch_row['ER']
          #   player_stats[playerID]['HR-A'] = pitch_row['HR']
          #   player_stats[playerID]['BB-A'] = pitch_row['BB']
          #   player_stats[playerID]['SO-A'] = pitch_row['SO']
          #   player_stats[playerID]['BAOpp'] = pitch_row['BAOpp']
          #   player_stats[playerID]['ERA'] = pitch_row['ERA']
          #   player_stats[playerID]['IBB-A'] = pitch_row['IBB']
          #   player_stats[playerID]['WP'] = pitch_row['WP']
          #   player_stats[playerID]['HBP-A'] = pitch_row['HBP']
          #   player_stats[playerID]['BK'] = pitch_row['BK']
          #   player_stats[playerID]['BFP'] = pitch_row['BFP']
          #   player_stats[playerID]['GF'] = pitch_row['GF']
          #   player_stats[playerID]['R-A'] = pitch_row['R']
          #   player_stats[playerID]['SH-A'] = pitch_row['SH']
          #   player_stats[playerID]['SF-A'] = pitch_row['SF']
          #   player_stats[playerID]['GIDP'] = pitch_row['GIDP']
#+end_src

#+RESULTS:

** Fielding Data

   This adds the position stats for the different players. The ~player_stats~
   dictionary is where the player information is aggregated until setting it to
   the ~master_df~.

#+begin_src python :session SESSION_1 :results output :exports both
  fielding_df_pos = fielding_df[['playerID', 'POS']]
  fielding_df_pos = fielding_df_pos.drop_duplicates(subset=['playerID'])

  for i, field_row in fielding_df_pos.iterrows():
      playerID = field_row['playerID']
      if playerID not in player_stats:
          player_stats[playerID] = {}
      player_stats[playerID]['POS'] = field_row['POS']
#+end_src

#+RESULTS:

   This adds some of the fielding stats to the ~player_stats~ like the previous
   pitching and fielding data.

#+begin_src python :session SESSION_1 :results output :exports both
  fielding_keys_list = ['PO', 'A', 'E', 'DP']
  fielding_col_list = ['PO', 'A', 'E', 'DP']
  # fielding_col_to_avg = ['ZR']

  for i, field_row in fielding_df.iterrows():
      playerID = field_row['playerID']
      if playerID not in player_stats:
          player_stats[playerID] = {}
      for stat_key, stat_col in zip(fielding_keys_list, fielding_col_list):
          if stat_key in player_stats[playerID]:
              player_stats[playerID][stat_key] += field_row[stat_col]
          else:
              player_stats[playerID][stat_key] = field_row[stat_col]

  # for i, field_row in fielding_df.iterrows():
  #     playerID = field_row['playerID']
  #     if playerID in player_stats:
  #         player_stats[playerID]['PO'] = player_stats[playerID]['PO'] + field_row['PO']
  #         player_stats[playerID]['A'] = player_stats[playerID]['A'] + field_row['A']
  #         player_stats[playerID]['E'] = player_stats[playerID]['E'] + field_row['E']
  #         player_stats[playerID]['DP'] = player_stats[playerID]['DP'] + field_row['DP']
  #         player_stats[playerID]['ZR'] = (player_stats[playerID]['ZR'] + field_row['ZR'])/2
  #     else:
  #         player_stats[playerID] = {}
  #         player_stats[playerID]['PO'] = field_row['PO']
  #         player_stats[playerID]['A'] = field_row['A']
  #         player_stats[playerID]['E'] = field_row['E']
  #         player_stats[playerID]['DP'] = field_row['DP']
  #         player_stats[playerID]['ZR'] = field_row['ZR']
#+end_src

#+RESULTS:

** Awards Data

   Selecting 5 of the ~awardID~ to be used as features.

#+begin_src python :session SESSION_1 :results output :exports both
awards_df['awardID'].unique()
mvp = awards_df[awards_df['awardID'] == 'Most Valuable Player']
roy = awards_df[awards_df['awardID'] == 'Rookie of the Year']
gg = awards_df[awards_df['awardID'] == 'Gold Glove']
ss = awards_df[awards_df['awardID'] == 'Silver Slugger']
ws_mvp = awards_df[awards_df['awardID'] == 'World Series MVP']
awards_list = [mvp,roy,gg,ss,ws_mvp]

mvp_list = []
roy_list = []
gg_list = []
ss_list = []
ws_mvp_list = []
lists = [mvp_list,roy_list,gg_list,ss_list,ws_mvp_list]

# add awards count for each player in player_stats
for index,v in enumerate(awards_list):
    for i,row in v.iterrows():
        playerID = row['playerID']
        award = row['awardID']

        if playerID in player_stats and playerID in lists[index]:
            player_stats[playerID][award] += 1
        else:
            lists[index].append(playerID)
            player_stats[playerID][award] = 1
#+end_src

#+RESULTS:

** All-Start Data
   Add a count of appearances in All-Star game for players in ~player_stats~.

#+begin_src python :session SESSION_1 :results output :exports both
allstar_list = []

for i,row in allstar_df.iterrows():
    playerID = row['playerID']
    if playerID in player_stats and playerID in allstar_list:
        player_stats[playerID]['AS_games'] += 1
    else:
        allstar_list.append(playerID)
        player_stats[playerID]['AS_games'] = 1
#+end_src

#+RESULTS:

** Hall of Fame Data

   Adding Hall of Fame information to ~master_df~.

#+begin_src python :session SESSION_1 :results output :exports both
hof_df = hof_df[(hof_df['inducted'] == 'Y') & (hof_df['category'] == 'Player')]

for i,row in hof_df.iterrows():
    playerID = row['playerID']
    if playerID in player_stats:
        player_stats[playerID]['HoF'] = 1
        player_stats[playerID]['votedBy'] = row['votedBy']
#+end_src

#+RESULTS:

** Player Data
   Until now, I have collected data from batting_df, fielding_df, awards_df,
   allstar_df, and hof_df into the player_stats dictionary. Then, I will
   convert it to a dataframe stats_df.

#+begin_src python :session SESSION_1 :results output :exports both
stats_df = pd.DataFrame.from_dict(player_stats,orient='index')

# join stats_df with master_df on index playerID
stats_df['playerID'] = stats_df.index
master_df = master_df.join(stats_df, on='playerID', how='inner',
                           rsuffix='mstr')
#+end_src

#+RESULTS:

** Appearance Data

   Aggregating information about appearances at each position for players for
   different years.

#+begin_src python :session SESSION_1 :results output :exports both
pos_dict = {}

for i,row in appearances_df.iterrows():
    ID = row['playerID']
    year = row['yearID']
    if ID in pos_dict:
        pos_dict[ID]['G_all'] = pos_dict[ID]['G_all'] + row['G_all']
        pos_dict[ID]['G_p'] = pos_dict[ID]['G_p'] + row['G_p']
        pos_dict[ID]['G_c'] = pos_dict[ID]['G_c'] + row['G_c']
        pos_dict[ID]['G_1b'] = pos_dict[ID]['G_1b'] + row['G_1b']
        pos_dict[ID]['G_2b'] = pos_dict[ID]['G_2b'] + row['G_2b']
        pos_dict[ID]['G_3b'] = pos_dict[ID]['G_3b'] + row['G_3b']
        pos_dict[ID]['G_ss'] = pos_dict[ID]['G_ss'] + row['G_ss']
        pos_dict[ID]['G_lf'] = pos_dict[ID]['G_lf'] + row['G_lf']
        pos_dict[ID]['G_cf'] = pos_dict[ID]['G_cf'] + row['G_cf']
        pos_dict[ID]['G_rf'] = pos_dict[ID]['G_rf'] + row['G_rf']
        pos_dict[ID]['G_of'] = pos_dict[ID]['G_of'] + row['G_of']
        pos_dict[ID]['G_dh'] = pos_dict[ID]['G_dh'] + row['G_dh']

        if year < 1920:
            pos_dict[ID]['pre1920'] = pos_dict[ID]['pre1920'] + row['G_all']
        elif year >= 1920 and year <= 1941:
            pos_dict[ID]['1920-41'] = pos_dict[ID]['1920-41'] + row['G_all']
        elif year >= 1942 and year <= 1945:
            pos_dict[ID]['1942-45'] = pos_dict[ID]['1942-45'] + row['G_all']
        elif year >= 1946 and year <= 1962:
            pos_dict[ID]['1946-62'] = pos_dict[ID]['1946-62'] + row['G_all']
        elif year >= 1963 and year <= 1976:
            pos_dict[ID]['1963-76'] = pos_dict[ID]['1963-76'] + row['G_all']
        elif year >= 1977 and year <= 1992:
            pos_dict[ID]['1977-92'] = pos_dict[ID]['1977-92'] + row['G_all']
        elif year >= 1993 and year <= 2009:
            pos_dict[ID]['1993-2009'] = pos_dict[ID]['1993-2009'] + row['G_all']
        elif year > 2009:
            pos_dict[ID]['post2009'] = pos_dict[ID]['post2009'] + row['G_all']
    else:
        pos_dict[ID] = {}
        pos_dict[ID]['G_all'] = row['G_all']
        pos_dict[ID]['G_p'] = row['G_p']
        pos_dict[ID]['G_c'] = row['G_c']
        pos_dict[ID]['G_1b'] = row['G_1b']
        pos_dict[ID]['G_2b'] = row['G_2b']
        pos_dict[ID]['G_3b'] = row['G_3b']
        pos_dict[ID]['G_ss'] = row['G_ss']
        pos_dict[ID]['G_lf'] = row['G_lf']
        pos_dict[ID]['G_cf'] = row['G_cf']
        pos_dict[ID]['G_rf'] = row['G_rf']
        pos_dict[ID]['G_of'] = row['G_of']
        pos_dict[ID]['G_dh'] = row['G_dh']
        pos_dict[ID]['pre1920'] = 0
        pos_dict[ID]['1920-41'] = 0
        pos_dict[ID]['1942-45'] = 0
        pos_dict[ID]['1946-62'] = 0
        pos_dict[ID]['1963-76'] = 0
        pos_dict[ID]['1977-92'] = 0
        pos_dict[ID]['1993-2009'] = 0
        pos_dict[ID]['post2009'] = 0

        if year < 1920:
            pos_dict[ID]['pre1920'] = row['G_all']
        elif year >= 1920 and year <= 1941:
            pos_dict[ID]['1920-41'] = row['G_all']
        elif year >= 1942 and year <= 1945:
            pos_dict[ID]['1942-45'] = row['G_all']
        elif year >= 1946 and year <= 1962:
            pos_dict[ID]['1946-62'] = row['G_all']
        elif year >= 1963 and year <= 1976:
            pos_dict[ID]['1963-76'] = row['G_all']
        elif year >= 1977 and year <= 1992:
            pos_dict[ID]['1977-92'] = row['G_all']
        elif year >= 1993 and year <= 2009:
            pos_dict[ID]['1993-2009'] = row['G_all']
        elif year > 2009:
            pos_dict[ID]['post2009'] = row['G_all']

pos_df = pd.DataFrame.from_dict(pos_dict,orient='index')
#+end_src

#+RESULTS:

* Joining and Saving the Datasets

  Simply adding appearance data to the ~master_df~.

#+begin_src python :session SESSION_1 :results output :exports both
## join pos_df and master_df
master_df = master_df.join(pos_df,on='playerID',how='right')
master_df.to_csv('../data/final_data.csv')
#+end_src

#+RESULTS:

* Links to Other Files in Project

  1. [[https://www.olavpedersen.com/standalone_hof/extract_data.html][extract_data]]: Extracting data from Lahman's raw data.
  2. [[https://www.olavpedersen.com/standalone_hof/filter_data.html][filter_data]]: Data manipulation, feature creation and feature selection.
  3. [[https://www.olavpedersen.com/standalone_hof/hall_of_fame_model.html][hof_model]]: Creation of the model and training of the neural network.
  4. [[https://www.olavpedersen.com/standalone_hof/grid_search_results.html][grid_search_results]]: Storing some of the results for the best Grid Searches


* Local Variables                                          :noexport:ARCHIVE:
# Local Variables:
# after-save-hook: org-html-export-to-html
# End:
